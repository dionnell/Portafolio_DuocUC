# Generated by Django 3.2.3 on 2021-06-16 23:57

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EntregaMedicamento',
            fields=[
                ('id_entrega', models.AutoField(primary_key=True, serialize=False)),
                ('fecha', models.DateField()),
            ],
            options={
                'db_table': 'entrega_medicamento',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Funcionario',
            fields=[
                ('rut_func', models.IntegerField(primary_key=True, serialize=False)),
                ('dv', models.CharField(max_length=1)),
                ('pri_nombre', models.CharField(max_length=50)),
                ('seg_nombre', models.CharField(max_length=50)),
                ('ape_paterno', models.CharField(max_length=50)),
                ('ape_materno', models.CharField(max_length=50)),
                ('user_func', models.CharField(max_length=50)),
                ('contra', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'funcionario',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Medicamento',
            fields=[
                ('id_med', models.AutoField(primary_key=True, serialize=False)),
                ('nombre', models.CharField(max_length=50)),
                ('detalle', models.CharField(max_length=100)),
                ('gramaje', models.CharField(max_length=10)),
                ('stock', models.BigIntegerField()),
                ('fabricante', models.CharField(max_length=100)),
                ('componentes', models.CharField(max_length=100)),
                ('tipo', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'medicamento',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Medico',
            fields=[
                ('rut_medico', models.IntegerField(primary_key=True, serialize=False)),
                ('dv', models.CharField(max_length=1)),
                ('pri_nombre', models.CharField(max_length=50)),
                ('seg_nombre', models.CharField(max_length=50)),
                ('ape_paterno', models.CharField(max_length=50)),
                ('ape_materno', models.CharField(max_length=50)),
                ('especialidad', models.CharField(max_length=50)),
                ('user_medic', models.CharField(max_length=50)),
                ('contra', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'medico',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Merma',
            fields=[
                ('merma_id', models.AutoField(primary_key=True, serialize=False)),
                ('fecha', models.DateField()),
                ('cantidad', models.BigIntegerField()),
                ('detalle', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'merma',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('rut_pac', models.IntegerField(help_text='ingresar rut sin puntos', primary_key=True, serialize=False)),
                ('dv', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('k', 'k')], max_length=1)),
                ('pri_nombre', models.CharField(max_length=50)),
                ('seg_nombre', models.CharField(max_length=50)),
                ('ape_paterno', models.CharField(max_length=50)),
                ('ape_materno', models.CharField(max_length=50)),
                ('edad', models.IntegerField()),
                ('sexo', models.CharField(choices=[('M', 'Masculino'), ('F', 'Femenino')], max_length=1)),
                ('telefono', models.IntegerField()),
                ('email', models.CharField(max_length=100)),
                ('inscripcion_fam', models.CharField(choices=[('si', 'Si'), ('no', 'No')], max_length=50)),
            ],
            options={
                'db_table': 'paciente',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Prescripcion',
            fields=[
                ('id_pres', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'prescripcion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReservaMedicamento',
            fields=[
                ('id_reserva', models.AutoField(primary_key=True, serialize=False)),
                ('detalle', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'reserva_medicamento',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DetallePrescripcion',
            fields=[
                ('id_pres', models.OneToOneField(db_column='id_pres', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='database.prescripcion')),
                ('descripcion', models.CharField(max_length=100)),
                ('cantidad', models.IntegerField()),
            ],
            options={
                'db_table': 'detalle_prescripcion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_medical', models.BooleanField(default=False)),
                ('is_pharma', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
